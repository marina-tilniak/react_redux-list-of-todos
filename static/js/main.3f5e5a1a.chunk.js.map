{"version":3,"sources":["store/actions.ts","store/index.ts","api/baseUrl.ts","api/todos.ts","store/selectors.ts","components/TodoList/TodoList.tsx","api/user.ts","components/CurrentUser/Curentuser.tsx","App.tsx","index.tsx"],"names":["LOADING_TODOS","CHANGE_USER_ID","DELETE_TODO","loadTodos","payload","type","changeUserId","initialState","todos","selectedUserId","store","createStore","state","action","filter","todo","id","composeWithDevTools","BASE_URL","getTodos","a","fetch","response","json","todoId","method","getTodosSelector","getSelectedUserId","TodoList","dispatch","useDispatch","useState","query","setQuery","status","setStatus","useSelector","loadTodosFromServer","todosFromServer","useEffect","handleDeleteTodo","deleteTodoFromServer","visibleTodos","filteredTodosByTitle","title","includes","completed","getFilteredTodos","className","value","onChange","event","target","map","ClassNames","htmlFor","String","readOnly","checked","updatedTodos","changeTodoStatus","onClick","userId","getUser","CurrentUser","user","setUser","hasError","setHasError","getUserFromServer","currentUser","name","email","phone","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3f5e5a1a.chunk.js","sourcesContent":["export const LOADING_TODOS = 'LOADING_TODOS';\nexport const CHANGE_USER_ID = 'CHANGE_USER_ID';\nexport const DELETE_TODO = 'DELETE_TODO';\n\nexport const loadTodos = (payload: Todo[]) => ({ type: LOADING_TODOS, payload });\n\nexport const changeUserId = (payload: number) => ({ type: CHANGE_USER_ID, payload });\n\nexport const deleteTodo = (payload: number) => ({ type: DELETE_TODO, payload });\n","import { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { LOADING_TODOS, CHANGE_USER_ID, DELETE_TODO } from './actions';\n\nconst initialState: RootState = {\n  todos: [],\n  selectedUserId: 0,\n};\n\nconst rootReducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case LOADING_TODOS:\n      return { ...state, todos: [...action.payload] };\n\n    case CHANGE_USER_ID:\n      return { ...state, selectedUserId: action.payload };\n\n    case DELETE_TODO:\n      return { ...state, todos: state.todos.filter(todo => todo.id !== action.payload) };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './baseUrl';\n\nexport async function getTodos(): Promise<Todo[]> {\n  const response = await fetch(`${BASE_URL}/todos`);\n\n  return response.json();\n}\n\nexport async function deleteTodoFromServer(todoId: number): Promise<Todo[]> {\n  const response = await fetch(`${BASE_URL}/todos/${todoId}`, { method: 'DELETE' });\n\n  return response.json();\n}\n","export const getTodosSelector = (state: RootState) => state.todos;\nexport const getSelectedUserId = (state: RootState) => state.selectedUserId;\n","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport ClassNames from 'classnames';\nimport { deleteTodoFromServer, getTodos } from '../../api/todos';\nimport { loadTodos, changeUserId, deleteTodo } from '../../store/actions';\nimport { getTodosSelector } from '../../store/selectors';\nimport './TodoList.scss';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const [query, setQuery] = useState('');\n  const [status, setStatus] = useState('all');\n  const todos = useSelector(getTodosSelector);\n\n  const handleClick = (userId: number) => {\n    dispatch(changeUserId(userId));\n  };\n\n  const loadTodosFromServer = async () => {\n    const todosFromServer = await getTodos();\n\n    dispatch(loadTodos(todosFromServer));\n  };\n\n  const changeTodoStatus = (todoId: number) => {\n    const updatedTodos = todos.map(todo => {\n      if (todo.id === todoId) {\n        return { ...todo, completed: !todo.completed };\n      }\n\n      return todo;\n    });\n\n    dispatch(loadTodos(updatedTodos));\n  };\n\n  useEffect(() => {\n    loadTodosFromServer();\n  }, []);\n\n  const getFilteredTodos = (): Todo[] => {\n    const filteredTodosByTitle = todos\n      .filter(todo => todo.title.includes(query));\n\n    switch (status) {\n      case 'active':\n        return filteredTodosByTitle.filter(todo => !todo.completed);\n      case 'completed':\n        return filteredTodosByTitle.filter(todo => todo.completed);\n      default:\n        return filteredTodosByTitle;\n    }\n  };\n\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setStatus(event.target.value);\n  };\n\n  const handleSearchInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const handleDeleteTodo = (todoId: number) => {\n    deleteTodoFromServer(todoId);\n    dispatch(deleteTodo(todoId));\n  };\n\n  const visibleTodos = getFilteredTodos();\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <input\n        type=\"text\"\n        className=\"input\"\n        value={query}\n        onChange={handleSearchInput}\n      />\n      <select\n        value={status}\n        onChange={handleSelectChange}\n        className=\"select is-link m-3\"\n      >\n        <option value=\"all\">Show all</option>\n        <option value=\"completed\">Show completed</option>\n        <option value=\"active\">Show active</option>\n      </select>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {visibleTodos.map(todo => (\n            <li\n              className={ClassNames('TodoList__item',\n                {\n                  'TodoList__item--checked': todo.completed,\n                  'TodoList__item--unchecked': !todo.completed,\n                })}\n              key={todo.id}\n            >\n              <label htmlFor={String(todo.id)}>\n                <input\n                  type=\"checkbox\"\n                  readOnly\n                  id={String(todo.id)}\n                  checked={todo.completed}\n                  onChange={() => changeTodoStatus(todo.id)}\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <div>\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                  type=\"button\"\n                  onClick={() => handleClick(todo.userId)}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--delete\n                    TodoList__user-button--selected\n                    button\n                  \"\n                  type=\"button\"\n                  onClick={() => handleDeleteTodo(todo.id)}\n                >\n                  Delete\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { BASE_URL } from './baseUrl';\n\nexport async function getUser(userId: number): Promise<User> {\n  const response = await fetch(`${BASE_URL}/users/${userId}`);\n\n  return response.json();\n}\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUser } from '../../api/user';\nimport { changeUserId } from '../../store/actions';\nimport { getSelectedUserId } from '../../store/selectors';\nimport './CurrentUser.scss';\n\nexport const CurrentUser: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const [user, setUser] = useState<User | null>(null);\n  const [hasError, setHasError] = useState(false);\n  const selectedUserId = useSelector(getSelectedUserId);\n\n  useEffect(() => {\n    const getUserFromServer = async () => {\n      try {\n        if (selectedUserId === 0) {\n          setUser(null);\n        } else {\n          const currentUser = await getUser(selectedUserId);\n\n          setUser(currentUser);\n        }\n\n        setHasError(false);\n      } catch {\n        setUser(null);\n        setHasError(true);\n      }\n    };\n\n    getUserFromServer();\n  },\n  [selectedUserId]);\n\n  if (hasError) {\n    return (\n      <div>User invalid</div>\n    );\n  }\n\n  if (!user) {\n    return (\n      <div>No selected User</div>\n    );\n  }\n\n  const clearUserDetails = () => {\n    dispatch(changeUserId(0));\n  };\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          {`Selected user: ${user.id}`}\n        </span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">\n        {user.name}\n      </h3>\n      <p className=\"CurrentUser__email\">\n        {user.email}\n      </p>\n      <p className=\"CurrentUser__phone\">\n        {user.phone}\n      </p>\n\n      <button\n        type=\"button\"\n        className=\"button\"\n        onClick={clearUserDetails}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","// import React from 'react';\n// import { useSelector } from 'react-redux';\n\nimport './App.scss';\nimport './general.scss';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          <CurrentUser />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}